type node = (string, ptr<node>, string, ptr<node>);

fun has_left(t: node) -> bool {
    let out <- t.2 != null;
    return out;
}

fun get_left(t: node) -> node {
    let out <- default<node>;
    *t.2 <-> out;
    return out;
}

fun get_right(t: node) -> node {
    let out <- default<node>;
    *t.4 <-> out;
    return out;
}

fun has_right(t: node) -> bool {
    let out <- t.4 != null;
    return out;
}

fun is_leaf(t: node) -> bool {
    let out <- t.2 == null && t.4 == null;
    return out;
}

fun should_check_left[n](t: node, k: string) -> bool {
    with {
        let h <- has_left(t);
        let s <- t.1;
        let p <- is_prefix[n](s, k);
    } do {
        let out <- h && p;
    }
    return out;
}

fun should_check_right[n](t: node, k: string) -> bool {
    with {
        let h <- has_right(t);
        let s <- t.3;
        let p <- is_prefix[n](s, k);
    } do {
        let out <- h && p;
    }
    return out;
}

fun left_substring(t: node, k: string) -> string {
    with {
        let s <- t.1;
        let l <- length(s);
    } do {
        let out <- get_substring(k, l);
    }
    return out;
}

fun right_substring(t: node, k: string) -> string {
    with {
        let s <- t.3;
        let r <- length(s);
    } do {
        let out <- get_substring(k, r);
    }
    return out;
}

fun dispatch[n](t: node, k: string) -> ptr<(node, string)> {
    with {
        let check_left <- should_check_left[n](t, k);
        let check_right <- should_check_right[n](t, k);
    } do if check_left {
        let out <- alloc<(node, string)>;
        with {
            let child <- get_left(t);
            let new_k <- left_substring(t, k);
        } do {
            let n <- (child, new_k);
            *out <-> n;
            let n -> (default<node>, default<string>);
        }
    } else if check_right {
        let out <- alloc<(node, string)>;
        with {
            let child <- get_right(t);
            let new_k <- right_substring(t, k);
        } do {
            let n <- (child, new_k);
            *out <-> n;
            let n -> (default<node>, default<string>);
        }
    } else {
        let out <- null;
    }
    return out;
}

fun contains[n](t: node, k: string) -> bool {
    with {
        /* If t is a leaf and k is empty, return true */
        let t_is_leaf <- is_leaf(t);
        let k_empty <- is_empty(k);
        let found <- t_is_leaf && k_empty;
    } do if found {
        let out <- true;
    } else with {
        /* If t is a leaf and k is not empty, return false */
        let not_found <- t_is_leaf && not k_empty;
    } do if not_found {
        let out <- false;
    } else with {
        /* If t is not a leaf and k is empty, return false */
        let not_found_2 <- not t_is_leaf && k_empty;
    } do if not_found_2 {
        let out <- false;
    } else with {
        /* Pick the next child to check */
        let child <- dispatch[n](t, k);
        let child_null <- child == null;
    } do if child_null {
        /* No child, return false */
        let out <- false;
    } else with {
        /* Check the child */
        let n <- (default<node>, default<string>);
        *child <-> n;
        let (next_t, next_k) <- n;
    } do {
        let out <- contains[n-1](next_t, next_k);
    }
    return out;
}

fun partial_match_left[n](t: node, k: string) -> uint {
    with {
        let h <- has_left(t);
        let s <- t.1;
    } do if h {
        let out <- num_matching[n](s, k);
    } else {
        let out <- 0;
    }
    return out;
}

fun partial_match_right[n](t: node, k: string) -> uint {
    with {
        let h <- has_right(t);
        let s <- t.3;
    } do if h {
        let out <- num_matching[n](s, k);
    } else {
        let out <- 0;
    }
    return out;
}

fun insert_here_left[n](t: node, k: string) -> unit {
    let n <- alloc<node>;
    let hl <- has_left(t);
    if hl {
        with {
            let ls <- t.1;
            let ln <- t.2;
        } do {
            let c <- (ls, ln, k, n);
            let n -> c.4;
            t <-> c;
            let c -> (ls, ln, default<string>, null);
        }
    } else with {
        let rs <- t.3;
        let rn <- t.4;
    } do {
        let c <- (k, n, rs, rn);
        let n -> c.2;
        t <-> c;
        let c -> (default<string>, null, rs, rn);
    }
    with {
        /* has_left is true if the left child does not store k */
        let l <- t.1;
        let r <- equal(l, k);
    } do {
        let hl -> not r;
    }
    return ();
}

fun insert_here_right[n](t: node, k: string) -> unit {
    let n <- alloc<node>;
    let hr <- has_right(t);
    if hr {
        with {
            let rs <- t.3;
            let rn <- t.4;
        } do {
            let c <- (k, n, rs, rn);
            let n -> c.2;
            t <-> c;
            let c -> (default<string>, null, rs, rn);
        }
    } else with {
        let ls <- t.1;
        let ln <- t.2;
    } do {
        let c <- (ls, ln, k, n);
        let n -> c.4;
        t <-> c;
        let c -> (ls, ln, default<string>, null);
    }
    with {
        /* has_right is true if the right child does not store k */
        let l <- t.3;
        let r <- equal(l, k);
    } do {
        let hr -> not r;
    }
    return ();
}

fun insert_here[n](t: node, k: string) -> unit {
    with {
        let b1 <- get(k, 0);
    } do if b1 {
        let out <- insert_here_right[n](t, k);
    } else {
        let out <- insert_here_left[n](t, k);
    }
    return out;
}

fun equal_at_left[n](t: node, k: string) -> bool {
    with {
        let h <- has_left(t);
        let s <- t.1;
    } do if h {
        let out <- equal(k, s);
    } else {
        let out <- false;
    }
    return out;
}

fun equal_at_right[n](t: node, k: string) -> bool {
    with {
        let h <- has_right(t);
        let s <- t.3;
    } do if h {
        let out <- equal(k, s);
    } else {
        let out <- false;
    }
    return out;
}

fun just_inserted[n](t: node, k: string) -> bool {
    with {
        let at_left <- equal_at_left[n](t, k);
        let at_right <- equal_at_right[n](t, k);
    } do {
        let out <- at_left || at_right;
    }
    return out;
}

fun descended[n](t: node, k: string) -> bool {
    with {
        let check_left <- should_check_left[n](t, k);
        let check_right <- should_check_right[n](t, k);
    } do {
        let out <- check_left || check_right;
    }
    return out;
}

fun split_right[n](t: node, k: string, match: uint) -> unit {
    with {
        let n <- default<node>;
        t <-> n;
    } do {
        let (ls, ln, rs, rn) <- n;
        let n -> (ls, ln, rs, rn);

        let pfx <- get_prefix(rs, match);
        let new_rs <- get_substring(rs, match);
        let rs -> concat(pfx, new_rs);

        with {
            let sfx <- get_substring(k, match);
        } do {
            let blank <- alloc<node>;
            let c <- compare[n](sfx, new_rs);
            if c {
                let n <- (sfx, blank, new_rs, rn);
                let blank -> n.2;
                let new_rs -> n.3;
                let rn -> n.4;
            } else {
                let n <- (new_rs, rn, sfx, blank);
                let new_rs -> n.1;
                let rn -> n.2;
                let blank -> n.4;
            }
            with {
                let temp <- n.1;
            } do {
                let c -> equal(sfx, temp);
            }
        }

        let p <- alloc<node>;
        *p <-> n;
        let n -> default<node>;

        let n <- (ls, ln, pfx, p);
        let (ls, ln, pfx, p) -> n;
    }
    return ();
}

fun split_left[n](t: node, k: string, match: uint) -> unit {
    with {
        let n <- default<node>;
        t <-> n;
    } do {
        let (ls, ln, rs, rn) <- n;
        let n -> (ls, ln, rs, rn);

        let pfx <- get_prefix(ls, match);
        let new_ls <- get_substring(ls, match);
        let ls -> concat(pfx, new_ls);

        with {
            let sfx <- get_substring(k, match);
        } do {
            let blank <- alloc<node>;
            let c <- compare[n](sfx, new_ls);
            if c {
                let n <- (sfx, blank, new_ls, ln);
                let blank -> n.2;
                let new_ls -> n.3;
                let ln -> n.4;
            } else {
                let n <- (new_ls, ln, sfx, blank);
                let new_ls -> n.1;
                let ln -> n.2;
                let blank -> n.4;
            }
            with {
                let temp <- n.1;
            } do {
                let c -> equal(sfx, temp);
            }
        }

        let p <- alloc<node>;
        *p <-> n;
        let n -> default<node>;

        let n <- (pfx, p, rs, rn);
        let (pfx, p, rs, rn) -> n;
    }

    return ();
}

fun insert_dispatch[n](t: node, k: string) -> ptr<(ptr<node>, string)> {
    let check_left <- should_check_left[n](t, k);
    let check_right <- should_check_right[n](t, k);
    if check_left {
        /* Full match on left, go to left child */
        let out <- alloc<(ptr<node>, string)>;
        with {
            let child <- t.2;
            let new_k <- left_substring(t, k);
        } do {
            let n <- (child, new_k);
            *out <-> n;
            let n -> (null, default<string>);
        }
    } else if check_right {
        /* Full match on right, go to right child */
        let out <- alloc<(ptr<node>, string)>;
        with {
            let child <- t.4;
            let new_k <- right_substring(t, k);
        } do {
            let n <- (child, new_k);
            *out <-> n;
            let n -> (null, default<string>);
        }
    } else {
        /* No recursive call */
        let out <- null;
        let match_left <- partial_match_left[n](t, k);
        let match_right <- partial_match_right[n](t, k);
        with {
            let nonzero_left <- match_left > 0;
            let nonzero_right <- match_right > 0;
        } do if nonzero_left {
            /* Split left node */
            let () <- split_left[n](t, k, match_left);
        } else if nonzero_right {
            /* Split right node */
            let () <- split_right[n](t, k, match_right);
        } else {
            /* Insert at this position */
            let () <- insert_here[n](t, k);
        }
        with {
            /* Because t has been modified, we uncompute by
             * determining whether we just inserted all of k */
            let b <- just_inserted[n](t, k);
        } do if b {
            /* There was no split */
            let match_right -> 0;
            let match_left -> 0;
        } else {
            /* There was a split, and these values remain the same */
            let match_right -> partial_match_right[n](t, k);
            let match_left -> partial_match_left[n](t, k);
        }
    }

    with {
        /* Because t has been modified, we uncompute via out */
        let out_null <- out == null;
    } do if out_null {
        /* There was no recursive call */
        let check_right -> false;
        let check_left -> false;
    } else with {
        let n <- (null, default<string>);
        *out <-> n;
    } do {
        /* Does out contain a pointer to the right or left child? */
        let check_right -> n.1 == t.4;
        let check_left -> n.1 == t.2;
    }
    return out;
}


fun insert[n](t: node, k: string) -> unit {
    /* Pick the next child to check */
    let child <- insert_dispatch[n](t, k);
    let child_null <- child == null;
    if child_null {
        /* No child to check, return */
        let out <- ();
        let child -> null;
    } else {
        with {
            /* Check the child */
            let n <- (null, default<string>);
            *child <-> n;
            let (next_tp, next_k) <- n;
            let next_t <- default<node>;
            *next_tp <-> next_t;
        } do {
            let out <- insert[n-1](next_t, next_k);
        }
        let child -> insert_dispatch[n](t, k);
    }
    let child_null -> descended[n](t, k);
    return out;
}

fun create() -> node {
    return default<node>;
}
